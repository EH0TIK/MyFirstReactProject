{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\DIMA\\\\Desktop\\\\ReactTestTask-MaxUser99-patch-1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"C:\\\\Users\\\\DIMA\\\\Desktop\\\\ReactTestTask-MaxUser99-patch-1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\DIMA\\\\Desktop\\\\ReactTestTask-MaxUser99-patch-1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\DIMA\\\\Desktop\\\\ReactTestTask-MaxUser99-patch-1\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchPersonsSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchProp),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchPropsSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watcherSaga);\n\nimport { put, takeLatest, call, fork, join } from \"redux-saga/effects\";\nimport { setData, stopLoading, loadingFailure, setProp, constants } from \"../reduxStuff/actions\";\n\nfunction fetchData(url) {\n  return fetch(url).then(function (response) {\n    return response.json();\n  });\n}\n\nfunction fetchPersonsSaga(_ref) {\n  var url, _ref2, results, next;\n\n  return _regeneratorRuntime.wrap(function fetchPersonsSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          url = _ref.url;\n          _context.prev = 1;\n\n        case 2:\n          if (!url) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.next = 5;\n          return call(fetchData, url);\n\n        case 5:\n          _ref2 = _context.sent;\n          results = _ref2.results;\n          next = _ref2.next;\n          _context.next = 10;\n          return put(setData(results));\n\n        case 10:\n          // url = \"\";\n          url = next;\n          _context.next = 2;\n          break;\n\n        case 13:\n          _context.next = 15;\n          return put(stopLoading());\n\n        case 15:\n          _context.next = 21;\n          break;\n\n        case 17:\n          _context.prev = 17;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 21;\n          return put(loadingFailure(_context.t0));\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 17]]);\n}\n\nfunction fetchProp(url) {\n  return _regeneratorRuntime.wrap(function fetchProp$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return call(fetchData, url);\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction fetchPropsSaga(_ref3) {\n  var payload, personName, propList, response, val, result, prop, index;\n  return _regeneratorRuntime.wrap(function fetchPropsSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          payload = _ref3.payload;\n          personName = payload.personName, propList = _objectWithoutProperties(payload, [\"personName\"]);\n          _context3.t0 = _regeneratorRuntime.keys(propList);\n\n        case 3:\n          if ((_context3.t1 = _context3.t0()).done) {\n            _context3.next = 35;\n            break;\n          }\n\n          prop = _context3.t1.value;\n          result = {\n            prop: prop,\n            personName: personName\n          };\n\n          if (!(typeof propList[prop] === \"object\")) {\n            _context3.next = 23;\n            break;\n          }\n\n          result = _objectSpread({}, result, {\n            val: []\n          });\n          _context3.t2 = _regeneratorRuntime.keys(propList[prop]);\n\n        case 9:\n          if ((_context3.t3 = _context3.t2()).done) {\n            _context3.next = 21;\n            break;\n          }\n\n          index = _context3.t3.value;\n          _context3.next = 13;\n          return fork(fetchProp, propList[prop][index]);\n\n        case 13:\n          response = _context3.sent;\n          _context3.next = 16;\n          return join(response);\n\n        case 16:\n          response = _context3.sent;\n          val = response[prop === \"films\" ? \"title\" : \"name\"];\n          result = _objectSpread({}, result, {\n            val: [].concat(_toConsumableArray(result.val), [val])\n          });\n          _context3.next = 9;\n          break;\n\n        case 21:\n          _context3.next = 31;\n          break;\n\n        case 23:\n          _context3.next = 25;\n          return fork(fetchProp, propList[prop]);\n\n        case 25:\n          response = _context3.sent;\n          _context3.next = 28;\n          return join(response);\n\n        case 28:\n          response = _context3.sent;\n          val = response[prop === \"films\" ? \"title\" : \"name\"];\n          result = _objectSpread({}, result, {\n            val: val\n          });\n\n        case 31:\n          _context3.next = 33;\n          return put(setProp(result));\n\n        case 33:\n          _context3.next = 3;\n          break;\n\n        case 35:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport function watcherSaga() {\n  return _regeneratorRuntime.wrap(function watcherSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(constants.FETCH_PROPS, fetchPropsSaga);\n\n        case 2:\n          _context4.next = 4;\n          return takeLatest(constants.START_LOADING, fetchPersonsSaga);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:\\Users\\DIMA\\Desktop\\ReactTestTask-MaxUser99-patch-1\\src\\saga\\sagas.js"],"names":["fetchPersonsSaga","fetchProp","fetchPropsSaga","watcherSaga","put","takeLatest","call","fork","join","setData","stopLoading","loadingFailure","setProp","constants","fetchData","url","fetch","then","response","json","results","next","payload","personName","propList","prop","result","val","index","FETCH_PROPS","START_LOADING"],"mappings":"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","sourcesContent":["import {\r\n  put,\r\n  takeLatest,\r\n  call,\r\n  fork,\r\n  join\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  setData,\r\n  stopLoading,\r\n  loadingFailure,\r\n  setProp,\r\n  constants\r\n} from \"../reduxStuff/actions\";\r\n\r\nfunction fetchData(url) {\r\n  return fetch(url)\r\n    .then(response => response.json());\r\n}\r\n\r\nfunction* fetchPersonsSaga({ url }) {\r\n  try {\r\n    while (url) {\r\n      // const { results } = yield call(fetchData, url);\r\n      const { results, next } = yield call(fetchData, url);\r\n      yield put(setData(results));\r\n      // url = \"\";\r\n      url = next;\r\n    }\r\n    yield put(stopLoading());\r\n  } catch (error) {\r\n    yield put(loadingFailure(error));\r\n  }\r\n}\r\n\r\nfunction* fetchProp(url) {\r\n  return yield call(fetchData, url);\r\n}\r\n\r\nfunction* fetchPropsSaga({ payload }) {\r\n  const { personName, ...propList } = payload;\r\n  let response;\r\n  let val;\r\n  let result;\r\n  for (const prop in propList) {\r\n    result = { prop, personName };\r\n    if (typeof propList[prop] === \"object\") {\r\n      result = { ...result, val: [] };\r\n      for (const index in propList[prop]) {\r\n        response = yield fork(fetchProp, propList[prop][index]);// url\r\n        response = yield join(response);\r\n        val = response[prop === \"films\" ? \"title\" : \"name\"];\r\n        result = { ...result, val: [...result.val, val] };\r\n      }\r\n    } else {\r\n      response = yield fork(fetchProp, propList[prop]);// url\r\n      response = yield join(response);\r\n      val = response[prop === \"films\" ? \"title\" : \"name\"];\r\n      result = { ...result, val };\r\n    }\r\n    yield put(setProp(result));\r\n  }\r\n}\r\n\r\nexport function* watcherSaga() {\r\n  yield takeLatest(constants.FETCH_PROPS, fetchPropsSaga);\r\n  yield takeLatest(constants.START_LOADING, fetchPersonsSaga);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}